import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import { fetchStations } from "../services/weatherApi";
import { WeatherState } from "./weatherSlice.types";
import { Dispatch } from "redux";

const initialState: WeatherState = {
  cities: [],
  stations: [],
  stationsStatus: "awaiting",
};

export const initializeWeatherDashboard = createAsyncThunk("weather/initialize", async () => {
  const stations = await fetchStations();
  // The value we return becomes the `fulfilled` action payload
  return stations;
});

export const weatherSlice = createSlice({
  name: "weather",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(initializeWeatherDashboard.pending, (state) => {
        state.stationsStatus = "loading";
      })
      .addCase(initializeWeatherDashboard.fulfilled, (state, action) => {
        state.stationsStatus = "idle";
        state.stations = action.payload;
      })
      .addCase(initializeWeatherDashboard.rejected, (state) => {
        state.stationsStatus = "failed";
      });
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectStations = (state: RootState) => state.weather.stations;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default weatherSlice.reducer;
